---

---

<button
  class="theme-toggle"
  id="theme-toggle"
  title="Toggles light & dark"
  aria-label="auto"
  aria-live="polite"
>
  <svg
    class="sun-and-moon"
    aria-hidden="true"
    width="24"
    height="24"
    viewBox="0 0 24 24"
  >
    <mask class="moon" id="moon-mask">
      <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
      <circle cx="24" cy="10" r="6" fill="black"></circle>
    </mask>
    <circle
      class="sun"
      cx="12"
      cy="12"
      r="6"
      mask="url(#moon-mask)"
      fill="currentColor"></circle>
    <g class="sun-beams" stroke="currentColor">
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </g>
  </svg>
</button>
<style>
  @import "https://unpkg.com/open-props/easings.min.css";
  .sun-and-moon {
    & > :is(.moon, .sun, .sun-beams) {
      transform-origin: center center;
    }

    & > :is(.moon, .sun) {
      fill: var(--text);
      @nest .theme-toggle:is(:hover, :focus-visible) > & {
        fill: var(--text);
      }
    }

    & > .sun-beams {
      stroke: var(--text);
      stroke-width: 2px;
      @nest .theme-toggle:is(:hover, :focus-visible) & {
        stroke: var(--text);
      }
    }
    @nest [data-theme="dark"] & {
      & > .sun {
        transform: scale(1.75);
      }
      & > .sun-beams {
        opacity: 0;
      }
      & > .moon > circle {
        transform: translateX(-7px);

        @supports (cx: 1) {
          transform: translateX(0);
          cx: 17;
        }
      }
    }
    @media (prefers-reduced-motion: no-preference) {
      & > .sun {
        transition: transform 0.5s var(--ease-elastic-3);
      }
      & > .sun-beams {
        transition:
          transform 0.5s var(--ease-elastic-4),
          opacity 0.5s var(--ease-3);
      }
      & .moon > circle {
        transition: transform 0.25s var(--ease-out-5);
        @supports (cx: 1) {
          transition: cx 0.25s var(--ease-out-5);
        }
      }
      @nest [data-theme="dark"] & {
        & > .sun {
          transform: scale(1.75);
          transition-timing-function: var(--ease-3);
          transition-duration: 0.25s;
        }
        & > .sun-beams {
          transform: rotateZ(-25deg);
          transition-duration: 0.15s;
        }
        & > .moon > circle {
          transition-delay: 0.25s;
          transition-duration: 0.5s;
        }
      }
    }
  }
  .themeToggle {
    --size: 2rem;
    font-size: 0.5rem;
    background: none;
    border: none;
    padding: 0;
    inline-size: var(--size);
    block-size: var(--size);
    aspect-ratio: 1;
    border-radius: 50%;
    cursor: pointer;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    outline-offset: 5px;
    & > svg {
      inline-size: 100%;
      block-size: 100%;
      stroke-linecap: round;
    }
    @media (hover: none) {
      --size: 48px;
    }
  }
</style>
<script is:inline>
  const storageKey = "theme-preference";
  const onClick = () => {
    theme.value = theme.value === "light" ? "dark" : "light";
    setColorPreference();
  };
  const getColorPreference = () => {
    if (localStorage.getItem(storageKey)) {
      return localStorage.getItem(storageKey);
    } else {
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }
  };
  const theme = {
    value: getColorPreference(),
  };
  const setColorPreference = () => {
    localStorage.setItem(storageKey, theme.value || "light");
    reflectPreference();
  };
  const reflectPreference = () => {
    document.firstElementChild?.setAttribute(
      "data-theme",
      theme.value || "light"
    );
    document
      .querySelector("#theme-toggle")
      ?.setAttribute("aria-label", theme.value || "light");
  };
  //set early so there is no flashing of theme change after page load
  reflectPreference();

  window.onload = () => {
    reflectPreference();
    document.querySelector("#theme-toggle")?.addEventListener("click", onClick);
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", ({ matches: isDark }) => {
        theme.value = isDark ? "dark" : "light";
        setColorPreference();
      });
  };
</script>
